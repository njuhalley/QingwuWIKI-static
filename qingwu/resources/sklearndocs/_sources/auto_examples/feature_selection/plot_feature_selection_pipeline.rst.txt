.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_feature_selection_plot_feature_selection_pipeline.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_feature_selection_plot_feature_selection_pipeline.py:


==================
Pipeline Anova SVM
==================

Simple usage of Pipeline that runs successively a univariate
feature selection with anova and then a SVM of the selected features.

Using a sub-pipeline, the fitted coefficients can be mapped back into
the original feature space.



.. code-block:: pytb

    Traceback (most recent call last):
      File "c:\programs\python\lib\site-packages\sphinx_gallery\gen_rst.py", line 394, in _memory_usage
        out = func()
      File "c:\programs\python\lib\site-packages\sphinx_gallery\gen_rst.py", line 382, in __call__
        exec(self.code, self.globals)
      File "D:\Desktop\scikit-learn\examples\feature_selection\plot_feature_selection_pipeline.py", line 39, in <module>
        coef = anova_svm[:-1].inverse_transform(anova_svm['linearsvc'].coef_)
    TypeError: 'Pipeline' object is not subscriptable





.. code-block:: default

    from sklearn import svm
    from sklearn.datasets import samples_generator
    from sklearn.feature_selection import SelectKBest, f_regression
    from sklearn.pipeline import make_pipeline
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import classification_report

    print(__doc__)

    # import some data to play with
    X, y = samples_generator.make_classification(
        n_features=20, n_informative=3, n_redundant=0, n_classes=4,
        n_clusters_per_class=2)

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

    # ANOVA SVM-C
    # 1) anova filter, take 3 best ranked features
    anova_filter = SelectKBest(f_regression, k=3)
    # 2) svm
    clf = svm.LinearSVC()

    anova_svm = make_pipeline(anova_filter, clf)
    anova_svm.fit(X_train, y_train)
    y_pred = anova_svm.predict(X_test)
    print(classification_report(y_test, y_pred))

    coef = anova_svm[:-1].inverse_transform(anova_svm['linearsvc'].coef_)
    print(coef)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.052 seconds)


.. _sphx_glr_download_auto_examples_feature_selection_plot_feature_selection_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_feature_selection_pipeline.py <plot_feature_selection_pipeline.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_feature_selection_pipeline.ipynb <plot_feature_selection_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
